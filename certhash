#!/usr/bin/python3
#
# Copyright (c) 2020 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os
import os.path
import base64
import getopt
import traceback

import cryptography.hazmat.backends as backends
import cryptography.x509 as x509
from cryptography.hazmat.primitives import hashes, serialization


class ProgramError(Exception):
    pass


def certificate_hash(certificate_file, digest_algorithm):
    try:
        with open(certificate_file, 'rb') as file:
            content = file.read()

    except (PermissionError, FileNotFoundError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    try:
        certificate = x509.load_pem_x509_certificate(content, backends.default_backend())
    except ValueError:
        raise ProgramError(f'No certificate in: {certificate_file}')

    if digest_algorithm == 'sha1':
        hash = hashes.SHA1()
    elif digest_algorithm == 'sha256':
        hash = hashes.SHA256()
    else:
        raise ProgramError(f'Unsupported digest algorithm: {digest_algorithm}')

    digest = hashes.Hash(hash, backends.default_backend())
    digest.update(certificate.public_bytes(serialization.Encoding.DER))

    output = digest.finalize()

    print(base64.b64encode(output).decode('utf-8'))


def main():
    short_options = 'hd:'
    long_options = ['help', 'digest=']

    digest_algorithm = 'sha1'
    certificate_file = None
    help = False

    try:
        options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)

    except getopt.GetoptError as error:
        raise ProgramError(error.msg[0].upper() + error.msg[1:])

    for option, argument in options:
        if option in ('-d', '--digest'):
            if argument not in ('sha1', 'sha256'):
                raise ProgramError(f'Invalid digest: {argument}')

            digest_algorithm = argument

        elif option in ('-h', '--help'):
            help = True

    if len(arguments):
        certificate_file = arguments[0]

    if help:
        print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] CERT-FILE\n'
              'Hash an x509 certificate and output as base64\n'
              '\n'
              '  -h, --help                print this help and exit\n'
              '  -d, --digest ALGORITHM    digest algorithm: sha1 or sha256 (default sha1)\n')

        return

    if certificate_file is None:
        raise ProgramError('No certificate file specified')

    certificate_hash(certificate_file, digest_algorithm)


if __name__ == '__main__':
    try:
        main()

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)

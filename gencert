#!/bin/bash
#
# Copyright (c) 2017 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

OPTIONS=$(getopt -n ${0##*/} -o "C:O:l:s:t:e:a:b:y:d:o:c:nh" \
    -l "common:,organization:,locality:,state:,country:,email:,alternate:,bits:,years:,digest:,output:,cacert:,newca,help" -- "$@")

if test $? -ne 0; then
    echo "Try \`${0##*/} --help' for more information"
    exit 1
fi

eval set -- "$OPTIONS"

COMMON_NAME="" ORGANIZATION="" LOCALITY="" STATE="" COUNTRY="" EMAIL_ADDRESS="" ALTERNATE_NAMES=() BITS="2048" YEARS="10" DIGEST="sha256" CA_CERTIFICATE="" OUTPUT_FILE="" NEW_CA=false

while true; do
    OPTION="$1"
    shift 1

    test -n "$OPTION" || break

    case "$OPTION" in
    -C|--common)
        COMMON_NAME="$1"
        shift 1
        ;;
    -O|--organization)
        ORGANIZATION="$1"
        shift 1
        ;;
    -l|--locality)
        LOCALITY="$1"
        shift 1
        ;;
    -s|--state)
        STATE="$1"
        shift 1
        ;;
    -t|--country)
        COUNTRY="${1^^[A-Z]}"
        shift 1

        if [[ ! $COUNTRY =~ ^[A-Z]{2}$ ]]; then
            echo "Invalid $OPTION \`$COUNTRY'" >&2
            exit 1
        fi
        ;;
    -e|--email)
        EMAIL_ADDRESS="$1"
        shift 1

        if [[ ! $EMAIL_ADDRESS =~ ^[a-zA-Z0-9\+\'\.\-]+@([a-zA-Z0-9]+\.)+[a-zA-Z0-9\-]+$ ]]; then
            echo "Invalid $OPTION \`$EMAIL_ADDRESS'" >&2
            exit 1
        fi
        ;;
    -a|--alternate)
        ALTERNATE_NAME="$1"
        shift 1

        if [[ ! $ALTERNATE_NAME =~ ^([a-z0-9\-]+\.)*[a-z0-9\-]+$ ]]; then
            echo "Invalid $OPTION \`$ALTERNATE_NAME'" >&2
            exit 1
        fi

        ALTERNATE_NAMES+=($1)
        ;;
    -b|--bits)
        BITS="$1"
        shift 1

        if [[ ! $BITS =~ ^[0-9]+$ || $BITS -lt 512 || $BITS -gt 4096 ]]; then
            echo "Invalid $OPTION \`$BITS'" >&2
            exit 1
        fi
        ;;
    -y|--years)
        YEARS="$1"
        shift 1

        if [[ ! $YEARS =~ ^[0-9]+$ || $YEARS -lt 1 ]]; then
            echo "Invalid $OPTION \`$YEARS'" >&2
            exit 1
        fi
        ;;
    -d|--digest)
        DIGEST="${1,,[a-z]}"
        shift 1

        if [[ $DIGEST != +(md5|sha1|sha256|sha512) ]]; then
            echo "Invaid $OPTION \`$DIGEST'" >&2
            exit 1
        fi
        ;;
    -o|--output)
        OUTPUT_FILE="$1"
        shift 1
        ;;
    -c|--cacert)
        CA_CERTIFICATE="$1"
        shift 1

        if ! test -f "$CA_CERTIFICATE"; then
            echo "CA certificate does not exist"
            exit 1
        fi
        ;;
    -n|--newca)
        NEW_CA=true
        ;;
    -h|--help)
        echo "Usage: ${0##*/} [OPTIONS]"
        echo "Generate and sign X509 certificates"
        echo ""
        echo "  -C --common <name>          common name"
        echo "  -O --organization <name>    organization"
        echo "  -l --locality <name>        locality"
        echo "  -s --state <name>           state"
        echo "  -t --country <code>         country code"
        echo "  -a --alternate <name>       alternate common name"
        echo "  -e --email <address>        email address"
        echo "  -b --bits <size>            RSA key size (default 2048)"
        echo "  -y --years <number>         number of years to sign the certificate (default 10)"
        echo "  -d --digest <name>          message digest to use: md5, sha1, sha256 or sha512 (default sha256)"
        echo "  -o --output                 output file"
        echo "  -c --cacert                 CA certificate to use for signing"
        echo "  -n --newca                  generate a CA certificate instead"
        echo "  -h --help                   print this help and exit"
        echo ""

        exit 0
        ;;
    --)
        shift 1
        break
        ;;
    esac
done

if test -z "$COMMON_NAME"; then
    echo "No common name specified"
    exit 1
fi

if test -z "$OUTPUT_FILE"; then
    OUTPUT_FILE=$(echo "$COMMON_NAME" | sed -e "s/[^A-Za-z0-9\.\-]/_/g").pem
fi

START_DATE=$(date -u -d "now" +"%Y%m%d000000Z")
END_DATE=$(date -u -d "now + $YEARS years" +"%Y%m%d000000Z")

TEMP_DIR=$(mktemp -d /tmp/gencert-XXXXXXXX)
test -n $TEMP_DIR || exit 1

trap "rm -rf $TEMP_DIR" EXIT
touch $TEMP_DIR/random $TEMP_DIR/database.txt
touch $TEMP_DIR/database.txt.attr

SERIAL_NUMBER=$(hexdump -n 16 -v -e "1/1 \"%02X\"" /dev/urandom)
echo "$SERIAL_NUMBER" > $TEMP_DIR/serial.txt

cat >> $TEMP_DIR/openssl.cnf <<EOF
RANDFILE = $TEMP_DIR/random

[ca]
default_ca = ca_default

[ca_default]
new_certs_dir = $TEMP_DIR
database = $TEMP_DIR/database.txt
serial = $TEMP_DIR/serial.txt
default_startdate = $START_DATE
default_enddate = $END_DATE
default_md = $DIGEST
EOF

if $NEW_CA; then
    cat >> $TEMP_DIR/openssl.cnf <<EOF
certificate = $TEMP_DIR/crt.pem
private_key = $TEMP_DIR/key.pem
x509_extensions = req_extensions
EOF
else
    cat >> $TEMP_DIR/openssl.cnf <<EOF
certificate = $CA_CERTIFICATE
private_key = $CA_CERTIFICATE
x509_extensions = ca_extensions
EOF
fi

cat >> $TEMP_DIR/openssl.cnf <<EOF
policy = policy_default
copy_extensons = none
email_in_dn = yes
preserve = no
unique_subject = no

[ca_extensions]
basicConstraints = CA:false
subjectKeyIdentifier = hash
keyUsage = Digital Signature, Key Encipherment, Data Encipherment
extendedKeyUsage = TLS Web Server Authentication, TLS Web Client Authentication
${ALTERNATE_NAMES[@]:+subjectAltName = @alternate_names}

[policy_default]
commonName = supplied
organizationName = optional
localityName = optional
stateOrProvinceName = optional
countryName = optional
emailAddress = optional

[req]
req_extensions = req_extensions
distinguished_name = distinguished_name
default_md = $DIGEST
prompt = no

[req_extensions]
basicConstraints = CA:true
subjectKeyIdentifier = hash
keyUsage = Certificate Sign, CRL Sign
${ALTERNATE_NAMES[@]:+subjectAltName = @alternate_names}

[distinguished_name]
commonName = $COMMON_NAME
${ORGANIZATION:+organizationName = $ORGANIZATION}
${LOCALITY:+localityName = $LOCALITY}
${STATE:+stateOrProviceName = $STATE}
${COUNTRY:+countryName = $COUNTRY}
${EMAIL_ADDRESS:+emailAddress = $EMAIL_ADDRESS}

[alternate_names]
EOF

for (( INDEX=0; INDEX < ${#ALTERNATE_NAMES[@]}; INDEX++ )); do
    echo "DNS.$INDEX = ${ALTERNATE_NAME[$INDEX]}" >> "$TEMP_DIR/openssl.cnf"
done

if ! openssl genrsa -out $TEMP_DIR/key.pem $BITS 2> /dev/null; then
    echo "Error while generating RSA key"
    exit 1
fi

if ! openssl req -config $TEMP_DIR/openssl.cnf -new -batch \
     -key $TEMP_DIR/key.pem -out $TEMP_DIR/req.pem; then
    echo "Error while creating signing request"
    exit 1
fi

if $NEW_CA; then
    if ! openssl ca -config $TEMP_DIR/openssl.cnf -notext -selfsign -batch \
         -in $TEMP_DIR/req.pem -out $TEMP_DIR/crt.pem 2> /dev/null; then
        echo "Error while signing CA certificate"
        exit 1
    fi

    cat $TEMP_DIR/key.pem $TEMP_DIR/crt.pem > $OUTPUT_FILE
    echo "New CA certificate created. Certificate and private-key saved in $OUTPUT_FILE"
else
    if test -z "$CA_CERTIFICATE"; then
        echo "No CA certificate specified"
        exit 1
    fi

    if ! openssl ca -config $TEMP_DIR/openssl.cnf -notext -batch \
         -in $TEMP_DIR/req.pem -out $TEMP_DIR/crt.pem 2> /dev/null; then
        echo "Error while signing certificate"
        exit 1
    fi

    cat $TEMP_DIR/key.pem $TEMP_DIR/crt.pem > $OUTPUT_FILE
    echo "New certificate signed by the CA. Certificate and private-key saved to $OUTPUT_FILE"
fi

exit 0
